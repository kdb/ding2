<?php
/**
 * @file
 * Enables listing the newest materials .
 */

include_once 'ting_new_materials.features.inc';

/**
 * Implements hook_ctools_plugin_directory().
 *
 * It simply tells panels where to find the .inc files that define various
 * args, contexts, content_types.
 */
function ting_new_materials_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

/**
 * Implements hook_theme().
 */
function ting_new_materials_theme($existing, $type, $theme, $path) {
  return array(
    'ting_new_materials' => array(
      'variables' => array(
        'title' => NULL,
        'legend' => NULL,
        'availability_legend' => NULL,
        'results' => NULL,
      ),
      'template'  => 'ting-new-materials',
      'path' => $path . '/templates',
    ),
  );
}

/**
 * Implements hook_node_validate().
 *
 * Check that the search query entered on the New materials node yield any
 * results.
 */
function ting_new_materials_node_validate($node, $form, &$form_state) {
  if ($node->type == 'new_materials') {
    // Search the data well with the query from the node.
    $query = ting_new_materials_build_search_query($node, TRUE);
    $results = ting_new_materials_do_search($query);

    if ($results->numTotalObjects == 0) {
      // There may not be any results with in the limit (time period). So try a
      // search without the limit.
      $query = ting_new_materials_build_search_query($node, FALSE);
      $results = ting_new_materials_do_search($query);
      if ($results->numTotalObjects == 0) {
        form_set_error('field_ting_new_materials_search', t('The query did not yield any results.'));
      }
      else {
        // @todo: If we can get any results how about checking the acquisitions
        // date for them and including it in the user. "The latest acquisition
        // is from YYYYMM".
        form_set_error('field_ting_new_materials_limit', t('The query did not yield any results with in the limit given.'));
      }
    }
  }
}

/**
 * Implements hook_node_update().
 *
 * Clear cache of search results (used in the panels plugin) for the node being
 * updated.
 */
function ting_new_materials_node_update($node) {
  if ($node->type == 'new_materials') {
    cache_clear_all('ting_new_materials_' . $node->nid, 'cache', TRUE);
  }
}

/**
 * Builds a search query string against the Data Well.
 *
 * @param Entity $entity
 *   A new materials entity content type.
 * @param bool $limit_query
 *   If TRUE the search query will be limited to the number of months given in
 *   the entity. Default TRUE.
 *
 * @return string
 *   Ting data well search string.
 */
function ting_new_materials_build_search_query($entity, $limit_query = TRUE) {
  // Get search query from the entity by using a metadata wrapper to access the
  // data.
  $wrapper = entity_metadata_wrapper('node', $entity);
  $query = $wrapper->field_ting_new_materials_search->value();

  // Check if limit expression should be added.
  if ($limit_query) {
    // Get the limit (number of months 1 to 12).
    $limit = $wrapper->field_ting_new_materials_limit->value();

    // Add the limit to the query.
    $query .= ting_new_materials_make_limit_query($limit);
  }
  $query = '(' . $query . ')';

  return $query;
}

/**
 * Limit a search query expression to a specified number of months.
 *
 * @param int $limit
 *   The number of months back to limit the results.  Min 1 and max 12 month. 0
 *   means unlimited.
 *
 * @return string
 *   The limit by month search query expression.
 */
function ting_new_materials_make_limit_query($limit = 0) {
  $query = "";

  if ($limit > 0) {
    // Get current date (defaults to now).
    $date = new DateTime();
    // The format "sort.acquisitionDate=(201403* OR 201402*) used here is due to
    // limitations in the data well. It simply don't support look up things
    // between two dates.
    $query = ' AND sort.acquisitionDate=(' . $date->format('Ym') . '*';
    for ($i = 1; $i <= $limit; $i++) {
      $date->sub(DateInterval::createFromDateString('1 month'));
      $query .= ' OR ' . $date->format('Ym') . '*';
    }
    $query .= ')';
  }

  return $query;
}

/**
 * Performs a query against the Data Well and returns the objects.
 *
 * @param string $query
 *   The query string.
 * @param int $page
 *   The current page number.
 * @param int $num_per_page
 *   The page number.
 *
 * @return TingClientSearchResult
 *   The search result.
 */
function ting_new_materials_do_search($query, $page = 0, $num_per_page = 10) {
  // Load the ting client.
  module_load_include('client.inc', 'ting');

  // Build search options and ensure that they are sorted correctly.
  $options = array();
  $options['sort'] = 'acquisitionDate_descending';
  $options['enrich'] = TRUE;
  $options['collectionType'] = 'manifestation';

  // Search the data well.
  $search_result = array();
  try {
    $search_result = ting_do_search($query, $page + 1, $num_per_page, $options);
  }
  catch (TingClientException $e) {
    watchdog('ting_new_materials', 'Failed to get objects from the Data well: “@message”', array('@message' => $e->getMessage(), WATCHDOG_ERROR));
  }

  return $search_result;
}
